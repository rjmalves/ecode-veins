//
// Generated file, do not edit! Created by nedtool 5.7 from veins/modules/messages/NRMessage.msg.
//

#ifndef __VEINS_NRMESSAGE_M_H
#define __VEINS_NRMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include <map>
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/messages/NRMessage.msg:13</tt> by nedtool.
 * <pre>
 * packet NRMessage extends BaseFrame1609_4
 * {
 *     int numElements;
 *     int ids[50];
 *     double speeds[50];
 *     string edges[50];
 *     string lanes[50];
 *     double lanePositions[50];
 *     string destinations[50];
 *     simtime_t times[50];
 * }
 * </pre>
 */
class VEINS_API NRMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int numElements;
    int ids[50];
    double speeds[50];
    ::omnetpp::opp_string edges[50];
    ::omnetpp::opp_string lanes[50];
    double lanePositions[50];
    ::omnetpp::opp_string destinations[50];
    ::omnetpp::simtime_t times[50];

  private:
    void copy(const NRMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NRMessage&);

  public:
    NRMessage(const char *name=nullptr, short kind=0);
    NRMessage(const NRMessage& other);
    virtual ~NRMessage();
    NRMessage& operator=(const NRMessage& other);
    virtual NRMessage *dup() const override {return new NRMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNumElements() const;
    virtual void setNumElements(int numElements);
    virtual unsigned int getIdsArraySize() const;
    virtual int getIds(unsigned int k) const;
    virtual void setIds(unsigned int k, int ids);
    virtual unsigned int getSpeedsArraySize() const;
    virtual double getSpeeds(unsigned int k) const;
    virtual void setSpeeds(unsigned int k, double speeds);
    virtual unsigned int getEdgesArraySize() const;
    virtual const char * getEdges(unsigned int k) const;
    virtual void setEdges(unsigned int k, const char * edges);
    virtual unsigned int getLanesArraySize() const;
    virtual const char * getLanes(unsigned int k) const;
    virtual void setLanes(unsigned int k, const char * lanes);
    virtual unsigned int getLanePositionsArraySize() const;
    virtual double getLanePositions(unsigned int k) const;
    virtual void setLanePositions(unsigned int k, double lanePositions);
    virtual unsigned int getDestinationsArraySize() const;
    virtual const char * getDestinations(unsigned int k) const;
    virtual void setDestinations(unsigned int k, const char * destinations);
    virtual unsigned int getTimesArraySize() const;
    virtual ::omnetpp::simtime_t getTimes(unsigned int k) const;
    virtual void setTimes(unsigned int k, ::omnetpp::simtime_t times);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NRMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NRMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_NRMESSAGE_M_H

